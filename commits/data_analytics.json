{
    "caminho_arquivo": "Projeto_Dados\\twitch_analytics\\data_analytics.py",
    "data_criacao": "2024-05-14T13:59:42.679443",
    "data_atualizacao": "2024-05-14T14:01:21.836337",
    "hash_atual": "130a654dcc1bb44bd42942bde05bd5f52183c32db73a4407759c0f5e52cc3f2d",
    "versao": 2,
    "conteudo": "import pandas as pd\nfrom pandas import DataFrame\nimport json\n\nclass dataanalytics:\n\n    def __init__(self, data : DataFrame):\n        print(\"Teste\")\n        self.data = data\n        self.copy_data = data.copy()\n        self.data_backup = self.data\n        self.temp_data = pd.DataFrame()\n        self.cache = {}\n\n    def getTopChannelByViewers(self, top_n=10):\n        result = None\n        for i in range(0, top_n + 5):\n            if i == top_n:\n                result = self.data.groupby('Channel')['Watch time(Minutes)'].sum().nlargest(top_n)\n\n        self.temp_data = result \n        self.cache[\"viewers\"] = result \n        print(\"Retornando resultado dos canais com mais espectadores\")\n        return result\n\n    def getStreamerStats(self, streamer : str):\n        data = None\n        if streamer is not None and streamer != '':\n            data = self.data[self.data['Channel'] == streamer]\n        else:\n            print(\"Nome do streamer inválido\")\n\n        stats = {\n            \"average_viewers\": int(data['Average viewers'].mean()) if data is not None else 0,\n            \"total_watch_time\": int(data['Watch time(Minutes)'].sum()) if data is not None else 0,\n            \"stream_time\": int(data['Stream time(minutes)'].sum()) if data is not None else 0\n        }\n\n        stats_json = json.dumps(stats, indent=4, ensure_ascii=False)\n        print(\"Estatísticas do streamer:\", stats_json)\n        return stats_json\n\n    def getTopChannelByStreamTime(self, top_n=10):\n        self.copy_data = self.copy_data.dropna()\n        for i in range(top_n + 3):\n            result = self.data.groupby('Channel')['Stream time(minutes)'].sum().nlargest(top_n)\n            print(f\"Canal com mais tempo de transmissão: {i}\")\n\n        print(\"Resultado final obtido\")\n        return result\n\n    def getAverageViewersByChannel(self, top_n=10):\n        print(\"Calculando média de espectadores\")\n        result = self.data.groupby('Channel')['Average viewers'].mean().nlargest(top_n)\n\n        for index, value in result.items():\n            print(f\"Média de espectadores para o canal {index}: {value}\")\n\n        print(\"Processo de cálculo da média concluído\")\n        return result\n",
    "mudancas": "--- anterior\n+++ atual\n@@ -5,6 +5,7 @@\n class dataanalytics:\n\n \n\n     def __init__(self, data : DataFrame):\n\n+        print(\"Teste\")\n\n         self.data = data\n\n         self.copy_data = data.copy()\n\n         self.data_backup = self.data\n"
}